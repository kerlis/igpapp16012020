package sistemasfireg.igp.org.sismosperu;
import android.animation.ObjectAnimator;
import android.animation.ValueAnimator;
import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Typeface;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.animation.TranslateAnimation;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.PopupMenu;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;
import com.github.clans.fab.FloatingActionButton;
import com.github.clans.fab.FloatingActionMenu;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DecimalFormat;
import java.util.Objects;
import java.util.StringTokenizer;
import me.leolin.shortcutbadger.ShortcutBadger;

public class Ultimosismo4 extends FragmentActivity implements OnMapReadyCallback {
    private SupportMapFragment sMapFragment;
    private Button mk;
    private TextView text_hora;
    private TextView text_intensidad;
    private TextView text_ubicacion;
    private TextView text_profundidad;
    private TextView txtmagnitud;
    private TextView txtubicacion;
    private TextView texto;
    private TextView iconocompartir;
    private RelativeLayout textoencabezado;
    private String fechadato;
    private String horadato;
    private String ubicacion;
    private String latitud;
    private String longitud;
    private Double lati;
    private Double longit;
    private String magni;
    private Button satelite;
    private Button terreno;
    private static final String TAG = Ultimosismo3.class.getSimpleName();
    private Button datox;
    private String k;
    private static final int READ_BLOCK_SIZE = 100;
    private DrawerLayout mDrawerLayout;
    private android.support.v7.app.ActionBarDrawerToggle mDrawerToggle;
    FloatingActionMenu materialDesignFAM;
    FloatingActionButton floatingActionButton1, floatingActionButton2, floatingActionButton3;
    private  ObjectAnimator obte;
    private  Button rocket;
    boolean isUp;
    RelativeLayout myView;
    RelativeLayout expandir;
    RelativeLayout blocktwo,blockone;
    FrameLayout mapxSS;
    Button sharebutton,glosariobutton;
    Context context;


    TextView datoz;

    private static final String ENABLED_NOTIFICATION_LISTENERS = "enabled_notification_listeners";
    private static final String ACTION_NOTIFICATION_LISTENER_SETTINGS = "android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS";

    private ImageView interceptedNotificationImageView;
   //private  ImageChangeBroadcastReceiver imageChangeBroadcastReceiver;
    private AlertDialog enableNotificationListenerAlertDialog;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_ultimosismo4);



/*
        interceptedNotificationImageView
                = (ImageView) this.findViewById(R.id.datox);


        if(!isNotificationServiceEnabled()){
            enableNotificationListenerAlertDialog = buildNotificationServiceAlertDialog();
            enableNotificationListenerAlertDialog.show();
        }

        imageChangeBroadcastReceiver = new ImageChangeBroadcastReceiver();
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction("sistemasfireg.igp.org.sismosperu.Firebasenotificationlistenerjava");
        registerReceiver(imageChangeBroadcastReceiver,intentFilter);
        */

    }






    @Override
    protected void onStart() {
        super.onStart();

/*

        datoz = findViewById(R.id.datox);
        LocalBroadcastManager.getInstance(this).registerReceiver(new BroadcastReceiver() {

            @Override
            public void onReceive(Context context, Intent intent) {
                String data = intent.getStringExtra("Hello");
                // Do something with the data
                datoz.setText(data);
            }
        }, new IntentFilter("SomeData"));

*/


        glosariobutton = findViewById(R.id.glosariobutton);

        sharebutton = findViewById(R.id.sharebutton);
        mapxSS = findViewById(R.id.mapx);
        blocktwo = findViewById(R.id.blocktwo);
        blockone = findViewById(R.id.blockone);
        expandir = findViewById(R.id.expandir);
        myView = findViewById(R.id.my_view);
        myView.setVisibility(View.INVISIBLE);
        rocket = findViewById(R.id.btnNovaCompra);

        rocket.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                slideUp(myView);

            }
        });
        slidedown();
        mapxSS.setOnTouchListener(new View.OnTouchListener() {


            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {

               /// slideDown2(myView);
               // Toast.makeText(Ultimosismo4.this, "tocaste", Toast.LENGTH_LONG).show();


                return false;
            }


        });

        onNewIntent(getIntent());
        Context context = this;
        String Message3 = "0";
        String file_name = "valorcero";
        try {
            FileOutputStream fileOutputStream = openFileOutput(file_name, MODE_PRIVATE);
            fileOutputStream.write(Message3.getBytes());
            fileOutputStream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        ShortcutBadger.applyCount(context, 0);
        String file2 = "datos_ordences";
        try {
            FileInputStream fileIn = openFileInput(file2);
            InputStreamReader InputRead= new InputStreamReader(fileIn);
            char[] inputBuffer= new char[READ_BLOCK_SIZE];
            int charRead;
            charRead=InputRead.read(inputBuffer);
            String readstring=String.copyValueOf(inputBuffer,0,charRead);
            k +=readstring;
            InputRead.close();
            StringTokenizer st = new StringTokenizer(k, ",");
            String ajustes = st.nextToken();
            String tipo = st.nextToken();

            Log.d(TAG, "valor: json: " + k);

        } catch (Exception e) {
            e.printStackTrace();
        }


        ConnectivityManager cmanager = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);
        NetworkInfo info = null;
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
            info = Objects.requireNonNull(cmanager).getActiveNetworkInfo();
        }
        if(info!= null && info.isConnected()){
            if(info.getType() == ConnectivityManager.TYPE_WIFI) {
                Toast.makeText(Ultimosismo4.this, "Conexión Establecida", Toast.LENGTH_LONG).show();
            }
            else if(info.getType() == ConnectivityManager.TYPE_MOBILE){
                Toast.makeText(Ultimosismo4.this, "Conexión Establecida", Toast.LENGTH_LONG).show();
            }
        }
        else{
            Toast.makeText(Ultimosismo4.this, "Su Equipo ha Bloquedo la Conexión", Toast.LENGTH_LONG).show();
        }

        detecta_sismo();
        sMapFragment = SupportMapFragment.newInstance();
        FragmentManager sFm = getSupportFragmentManager();
        sFm.beginTransaction().add(R.id.mapx, sMapFragment).commit();
        sMapFragment.getMapAsync(this);



        Typeface fontAwesomeFont = Typeface.createFromAsset(getAssets(), "fontawesome-webfont.ttf");

        /*
        TextView ihoras = findViewById(R.id.iconohora);
        TextView iubicaciones = findViewById(R.id.iconoubicacion);
        ihoras.setTypeface(fontAwesomeFont);
        iubicaciones.setTypeface(fontAwesomeFont);
        */


        satelite = findViewById(R.id.satelite);
        terreno =  findViewById(R.id.terreno);
        datox = findViewById(R.id.localizacion);
        datox.setTypeface(fontAwesomeFont);
        text_hora =  findViewById(R.id.text_hora);
        text_intensidad =  findViewById(R.id.text_intensidad);
        text_ubicacion = findViewById(R.id.text_ubicacion);
        text_profundidad = findViewById(R.id.text_profundidad);
        txtmagnitud = findViewById(R.id.grados);
        txtubicacion = findViewById(R.id.txtubicacion);
        texto = findViewById(R.id.texto);

        iconocompartir = findViewById(R.id.iconocompartir);
        iconocompartir.setTypeface(fontAwesomeFont);
        iconocompartir.setBackgroundResource(R.drawable.circuloblanco);
        textoencabezado = findViewById(R.id.textoencabezado);

        ImageView sliderz = findViewById(R.id.sliderz);
        mDrawerLayout = findViewById(R.id.drawer_layout);
        mDrawerLayout = findViewById(R.id.drawer_layout);
        mDrawerLayout.setDrawerListener(mDrawerToggle);
        setupDrawerToggle();
        sliderz.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mDrawerLayout.openDrawer(GravityCompat.START);
            }
        });

        RelativeLayout blocke1a = findViewById(R.id.blocke1);
        RelativeLayout blocke2a = findViewById(R.id.blocke2);
        RelativeLayout blocke3a = findViewById(R.id.blocke3);
        RelativeLayout blocke4a = findViewById(R.id.blocke4);
        RelativeLayout blocke5a = findViewById(R.id.blocke5);
        RelativeLayout blocke6a = findViewById(R.id.blocke6);
        RelativeLayout blocke9 = findViewById(R.id.blocke9);

        blocke1a.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                Intent intent = new Intent(Ultimosismo4.this,Ultimosismo4.class);
                startActivity(intent);
            }
        });
        blocke2a.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                Intent intent = new Intent(Ultimosismo4.this,Ultimosismoslist.class);
                startActivity(intent);
            }
        });
        blocke3a.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                Intent intent = new Intent(Ultimosismo4.this,Listadoenmapa.class);
                startActivity(intent);
            }
        });
        blocke4a.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                Intent intent = new Intent(Ultimosismo4.this,Configuraciones.class);
                startActivity(intent);
            }
        });
        blocke5a.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                Intent intent = new Intent(Ultimosismo4.this,Glosarioestatico.class);
                startActivity(intent);
            }
        });
        blocke6a.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                Intent intent = new Intent(Intent.ACTION_MAIN);
                intent.addCategory(Intent.CATEGORY_HOME);
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                startActivity(intent);
                finish();
            }
        });
        blocke9.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                Intent intent = new Intent(Ultimosismo4.this,Listadoredessociales.class);
                startActivity(intent);
            }
        });


        mk = findViewById(R.id.button);
        mk.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                PopupMenu popup = new PopupMenu(Ultimosismo4.this, mk);
                popup.getMenuInflater().inflate(R.menu.menu_main, popup.getMenu());

                popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {

                    public boolean onMenuItemClick(MenuItem item) {

                        int id = item.getItemId();

                        if (id == R.id.ultimo_sismo) {
                            Intent intent = new Intent(Ultimosismo4.this,Ultimosismo4.class);
                            startActivity(intent);
                            return true;
                        }


                        if (id == R.id.listado_ultimos_sismos) {
                            Intent intent = new Intent(Ultimosismo4.this,Ultimosismoslist.class);
                            startActivity(intent);
                            return true;
                        }

                        if (id == R.id.mapa_sismos) {
                            Intent intent = new Intent(Ultimosismo4.this,Listadoenmapa.class);
                            startActivity(intent);
                            return true;
                        }

                        if (id == R.id.glosario) {
                            Intent intent = new Intent(Ultimosismo4.this,Glosarioestatico.class);
                            startActivity(intent);
                            return true;
                        }

                        if (id == R.id.notificarsino) {
                            Intent intent = new Intent(Ultimosismo4.this,Configuraciones.class);
                            startActivity(intent);
                            return true;
                        }

                        if (id == R.id.salir) {
                            Intent intent = new Intent(Intent.ACTION_MAIN);
                            intent.addCategory(Intent.CATEGORY_HOME);
                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                            startActivity(intent);
                            finish();
                        }
                        return Ultimosismo4.super.onOptionsItemSelected(item);
                    }
                });
                popup.show();
            }
        });
        mostrar_ult_sismo();
       // Toast.makeText(Ultimosismo4.this, "Actvidad en pausa", Toast.LENGTH_LONG).show();




        glosariobutton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                verpopup();
            }
        });




    }

    @Override
    protected void onStop() {
        super.onStop();
     //   Toast.makeText(Ultimosismo4.this, "Actvidad en pausa", Toast.LENGTH_LONG).show();
    }

    private void setupDrawerToggle(){
        mDrawerToggle = new android.support.v7.app.ActionBarDrawerToggle(this,mDrawerLayout,R.string.app_name, R.string.app_name);
        mDrawerToggle.syncState();
    }

    private void detecta_sismo() {

        DatabaseReference mDatabase;
        mDatabase = FirebaseDatabase.getInstance("https://igpsismos2.firebaseio.com/").getReference("messages");
        mDatabase.keepSynced(true);
        mDatabase.orderByKey().limitToLast(1).addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String s) {
                DatSismo sreporte = dataSnapshot.getValue(DatSismo.class);
                guardar_pref(sreporte);
            }
            @Override
            public void onChildChanged(DataSnapshot dataSnapshot, String s) {
                DatSismo sreporte = dataSnapshot.getValue(DatSismo.class);
                guardar_pref(sreporte);
            }
            @Override
            public void onChildRemoved(DataSnapshot dataSnapshot) {
                DatSismo sreporte = dataSnapshot.getValue(DatSismo.class);
                guardar_pref(sreporte);
            }
            @Override
            public void onChildMoved(DataSnapshot dataSnapshot, String s) {
                DatSismo sreporte = dataSnapshot.getValue(DatSismo.class);
                guardar_pref(sreporte);
            }
            @Override
            public void onCancelled(DatabaseError databaseError) {
            }
        });
    }

    private void guardar_pref(DatSismo sreporte) {
        SharedPreferences prefs = getSharedPreferences("ultsismo", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putString("incategoria", sreporte.getCategoria());
        editor.putString("inreferencia", sreporte.getReferencia());
        editor.putString("inmagnitud", sreporte.getMagnitud());
        editor.putString("inprof", sreporte.getProfundidad());
        editor.putString("infecha", sreporte.getFechautc());
        editor.putString("txintenso", sreporte.getIntenso());
        editor.putString("inhora", sreporte.getHorautc());
        editor.putString("inlat", sreporte.getLat());
        editor.putString("inlong", sreporte.getLon());
        editor.putString("inepic", sreporte.getEpicentro());
        editor.putString("insim", sreporte.getSimulacro());
        editor.apply();
        mostrar_ult_sismo();
    }

    private void mostrar_ult_sismo() {
        SharedPreferences prefs = getSharedPreferences("ultsismo", Context.MODE_PRIVATE);
        ubicacion = prefs.getString("inreferencia","Aqui");
        magni = prefs.getString("inmagnitud","");
        String profundidad = prefs.getString("inprof","");
        fechadato= prefs.getString("infecha","0");
        String intensidad = prefs.getString("txintenso", "");
        String hora = prefs.getString("inhora", "");
        latitud = prefs.getString("inlat","0");
        longitud = prefs.getString("inlong","0");
        String epicentro = prefs.getString("inepic", "");
        String simulacro  = prefs.getString("insim", "");


        String fecha = prefs.getString("infecha", "");
        horadato = prefs.getString("inhora","0");

        iconocompartir.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent sharingIntent = new Intent(android.content.Intent.ACTION_SEND);
                sharingIntent.setType("text/plain");
                String shareBody = "Reporte de Último Sismo Perú" +  "\n";
                String shareSub = "Reporte de Último Sismo Perú" +  "\n" + "Fecha Local: " + fechadato + "  " + horadato +  "\n Magnitud: " + magni + "\n" +  "Latitud: " + latitud + " " + "Longitud: " + longitud + "\n" + "Referencia: " + ubicacion + "\n"  +   "\n"  ;
                sharingIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, shareBody);
                sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, shareSub);
                startActivity(Intent.createChooser(sharingIntent, "compartir último sismo"));
            }
        });

        sharebutton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent sharingIntent = new Intent(android.content.Intent.ACTION_SEND);
                sharingIntent.setType("text/plain");
                String shareBody = "Reporte de Último Sismo Perú" +  "\n";
                String shareSub = "Reporte de Último Sismo Perú" +  "\n" + "Fecha Local: " + fechadato + "  " + horadato +  "\n Magnitud: " + magni + "\n" +  "Latitud: " + latitud + " " + "Longitud: " + longitud + "\n" + "Referencia: " + ubicacion + "\n"  +   "\n"  ;
                sharingIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, shareBody);
                sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, shareSub);
                startActivity(Intent.createChooser(sharingIntent, "compartir último sismo"));
            }
        });



        //evaluar dato intensidad
        String dato_intensidad;
        if (intensidad.length() == 0){
            dato_intensidad = "- -";
        }
        else{
            dato_intensidad = intensidad;
        }

        text_intensidad.setText(dato_intensidad);



        //evaluar dato hora
        String dato_hora;
        if (hora.length() == 0){
            dato_hora = "- -";
        }
        else{
            dato_hora = hora;
        }

        //evaluar dato fecha
        String dato_fecha;
        if (fecha.length() == 0){
            dato_fecha = "- -";
        }
        else{
            dato_fecha = fecha;
        }
        text_hora.setText(dato_fecha +"   "+ dato_hora);


        //evaluar dato profundidad
        String dato_profundidad;
        if (profundidad.length() == 0){
            dato_profundidad = "- -";
        }
        else{
            dato_profundidad = profundidad;
        }
        text_profundidad.setText(dato_profundidad +""+" km");

        //evaluar dato magnitud
        double w;

        try {
            w = Double.valueOf(magni);
        } catch (NumberFormatException e) {
            w = 0;
        }

        String magnitud2;
        if (w == 0){
            magnitud2 = "0";
        }
        else
        {
            magnitud2 = magni;
        }

        Double val = Double.parseDouble(magnitud2);
        txtmagnitud.setText(magnitud2);

        if (val >= 0 && val < 4.5){
            txtmagnitud.setBackgroundResource(R.drawable.circuloverde);
            textoencabezado.setBackgroundColor(getResources().getColor(R.color.verdeigp));
        }

        else if (val >= 4.5 && val <= 6.0){
            txtmagnitud.setBackgroundResource(R.drawable.circuloamarillo);
            textoencabezado.setBackgroundColor(getResources().getColor(R.color.orangeyellow));
        }

        else if (val > 6.0 && val <= 15){
            txtmagnitud.setBackgroundResource(R.drawable.circulorojo);
            textoencabezado.setBackgroundColor(getResources().getColor(R.color.rojoigp));
        }

        else  {
            txtmagnitud.setBackgroundResource(R.drawable.circulorojo);
            textoencabezado.setBackgroundColor(getResources().getColor(R.color.rojoigp));
        }

        //evaluar dato ubicacion
        String dato_ubicacion;
        if (ubicacion.length() == 0){
            dato_ubicacion = "null";
        }
        else{
            dato_ubicacion = ubicacion;
        }

        String z = dato_ubicacion.replace("-","\n");
        txtubicacion.setText(z);

         //txtubicacion.setText(dato_ubicacion);


        //evaluar dato simulacro
        int g;

        try {
            g = Integer.valueOf(simulacro);
        } catch (NumberFormatException e) {
            g = 0;
        }


        /*
        if (g == 0){
            texto.setText("Último Sismo "   + "(mg "+magnitud2+")");
        }
        else if (g == 1){
            texto.setText("Simulacro " +   "(mg "+magnitud2+")");
        }
        else if (g == 2){
            texto.setText("Simulación " +   "(mg "+magnitud2+")");
        }
        else{
            texto.setText("Último Sismo "  +   "(mg "+magnitud2+")");
        }

*/



        if (g == 0){
            texto.setText("Último Sismo ");
        }
        else if (g == 1){
            texto.setText("Simulacro ");
        }
        else if (g == 2){
            texto.setText("Simulación ");
        }
        else{
            texto.setText("Último Sismo ");
        }




        lati= Double.parseDouble(latitud);
        longit = Double.parseDouble(longitud);
        sMapFragment.getMapAsync(this);
        DecimalFormat form = new DecimalFormat("0.00");
        text_ubicacion.setText(form.format(lati)+"  "+" "+form.format(longit));
    }

    public void onMapReady(final GoogleMap googleMap) {
        BitmapDescriptor icon = BitmapDescriptorFactory.fromResource(R.drawable.iconored);
        LatLng latLng = new LatLng(lati,longit);
        googleMap.clear();
        googleMap.addMarker(new MarkerOptions().position(latLng).title("Epicentro").icon(icon).anchor(0.5f, 0.5f)).showInfoWindow();
        googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(latLng, 6));
        googleMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
        googleMap.animateCamera(CameraUpdateFactory.zoomTo(6), 1500, null);
        googleMap.getUiSettings().setZoomControlsEnabled(true);
        googleMap.getUiSettings().setIndoorLevelPickerEnabled(true);
        googleMap.getUiSettings().setTiltGesturesEnabled(true);
        googleMap.getUiSettings().setCompassEnabled(true);

        satelite.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                googleMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
            }
        });

        terreno.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                googleMap.setMapType(GoogleMap.MAP_TYPE_TERRAIN);
            }
        });

        datox.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
                googleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lati, longit), 6));
            }
        });




        googleMap.setOnMapClickListener(new GoogleMap.OnMapClickListener() {
            @Override
            public void onMapClick(LatLng point) {

                if (myView.getVisibility() == View.VISIBLE){
                    slideDown2(myView);

                }
                else{
                    slideDown3(myView);
                }

            }
        });


/*
        KmlLayer layer = null;
        try {
            layer = new KmlLayer(googleMap, R.raw.mapa,this);
        } catch (XmlPullParserException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            layer.addLayerToMap();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (XmlPullParserException e) {
            e.printStackTrace();
        }
*/



        googleMap.setPadding(0, 0, 0, 35);



    }




    private void slidedown() {
        obte = ObjectAnimator.ofFloat(rocket, "Y", 20f);

        obte.setDuration(400);
        obte.setRepeatCount(ValueAnimator.INFINITE);
        obte.setRepeatMode(ValueAnimator.RESTART);
        obte.start();
    }


    public void slideUp(View view){
        view.setVisibility(View.VISIBLE);
        TranslateAnimation animate = new TranslateAnimation(
                0,                 // fromXDelta
                0,                 // toXDelta
                view.getHeight(),  // fromYDelta
                0);                // toYDelta
        animate.setDuration(300);
        animate.setFillAfter(true);
        view.startAnimation(animate);
    }
    public void slideUp2(View view){
        view.setVisibility(View.VISIBLE);

    }
    // slide the view from its current position to below itself
    public void slideDown2(View view){
        view.setVisibility(View.GONE);

        TranslateAnimation animate = new TranslateAnimation(
                0,                 // fromXDelta
                0,                 // toXDelta
                0,                 // fromYDelta
                view.getHeight()); // toYDelta
        animate.setDuration(500);
        animate.setFillAfter(true);
        view.startAnimation(animate);

    }
    public void slideDown3(View view){
        view.setVisibility(View.GONE);



    }


    public void onSlideViewButtonClick(View view) {
      //  if (isUp) {
        //    slideDown(myView);
         //   myButton.setText("Slide up");
        //} else {
           // slideUp(myView);
           // myButton.setText("Slide down");
        //}
        //isUp = !isUp;
    }

 /*
    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {

        Rect viewRect = new Rect();
        myView.getGlobalVisibleRect(viewRect);


        Rect viewRect2 = new Rect();
        expandir.getGlobalVisibleRect(viewRect2);



        blocktwo = findViewById(R.id.blocktwo);
        blockone = findViewById(R.id.blockone);



        if ((!viewRect.contains((int) ev.getRawX(), (int) ev.getRawY())) && (!viewRect2.contains((int) ev.getRawX(), (int) ev.getRawY())) &&  (myView.getVisibility() == View.VISIBLE)) {
           // setVisible(false);

            slideDown2(myView);

        }
        else if ((viewRect.contains((int) ev.getRawX(), (int) ev.getRawY())) && (viewRect2.contains((int) ev.getRawX(), (int) ev.getRawY())) &&  (myView.getVisibility() == View.VISIBLE) &&  (blockone.getVisibility() == View.VISIBLE) &&  (blocktwo.getVisibility() == View.VISIBLE)){


            slideDown2(myView);


       }
       else{
            slideUp(myView);

        }

        return true;

    }
    */

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        return super.onTouchEvent(event);
    }

    public void verpopup() {
        /*
        AlertDialog.Builder builder = new AlertDialog.Builder(Ultimosismo4.this);
        LayoutInflater inflater =  getLayoutInflater();
        builder.setView(inflater.inflate(R.layout.datosglosariopopup, null));
        builder.create().show();


        Toast.makeText(Ultimosismo4.this, "POPUP", Toast.LENGTH_LONG).show();

*/

// ...Irrelevant code for customizing the buttons and title

        AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this);
        LayoutInflater inflater = this.getLayoutInflater();
        View dialogView = inflater.inflate(R.layout.datosglosariopopup, null);
        dialogBuilder.setView(dialogView);


        Button cerrar = dialogView.findViewById(R.id.close);








      // EditText editText = (EditText) dialogView.findViewById(R.id.label_field);
      //  editText.setText("test label");

        final AlertDialog alertDialog = dialogBuilder.create();
        alertDialog.show();



        cerrar.setOnClickListener(new View.OnClickListener(){
            @Override
            public void onClick(View arg0) {
            alertDialog.hide();
            }
        });



        /*
        View view;
        LayoutInflater inflater = (LayoutInflater)  context.getSystemService(context.LAYOUT_INFLATER_SERVICE);
        view = inflater.inflate(R.layout.datosglosariopopup, null);
        AlertDialog.Builder dialog  = new AlertDialog.Builder(context);
        dialog.setView(view);
        dialog.show();
        */


        //  TextView  distrito_textview = view.findViewById(R.id.distrito);
        // TextView  local_textview = view.findViewById(R.id.local);
        //  TextView  nombre_textview = view.findViewById(R.id.nombre);

        /*
        TextView  descripciontext = view.findViewById(R.id.descripciontext);
        TextView  estacionamientotext = view.findViewById(R.id.estacionamientotext);
        TextView  incluyetext = view.findViewById(R.id.incluyetext);
        TextView  localtext = view.findViewById(R.id.localtext);
        TextView  distritotext = view.findViewById(R.id.distritotext);
        TextView  tribunatext = view.findViewById(R.id.tribunatext);
        ImageView  fotoima = view.findViewById(R.id.foto);

        descripciontext.setText(descripcion);
        estacionamientotext.setText(estacionamiento);
        incluyetext.setText(incluye);
        localtext.setText(local);
        distritotext.setText(distrito);
        tribunatext.setText(tribuna);

        fotoima.setImageBitmap(getBitmapFromURL(canchamedidas));
        */
/*
        if(foto != null && !foto.isEmpty())
        {
            Picasso.with(this.context).load(canchamedidas)
                    .resize(120, 100)
                    .onlyScaleDown()
                    .into(fotoima);



        }
*/

        // distrito_textview.setText(distrito);
        // local_textview.setText(local);
        // nombre_textview.setText(nombre);
    }


/*

    @Override
    protected void onDestroy() {
        super.onDestroy();
        unregisterReceiver(imageChangeBroadcastReceiver);
    }


    private void changeInterceptedNotificationImage(int notificationCode){
        switch(notificationCode){
            case Firebasenotificationlistener.InterceptedNotificationCode.FACEBOOK_CODE:
                interceptedNotificationImageView.setImageResource(R.drawable.facebook_logo);
                break;
            case Firebasenotificationlistener.InterceptedNotificationCode.INSTAGRAM_CODE:
                interceptedNotificationImageView.setImageResource(R.drawable.instagram_logo);
                break;
            case Firebasenotificationlistener.InterceptedNotificationCode.WHATSAPP_CODE:
                interceptedNotificationImageView.setImageResource(R.drawable.whatsapp_logo);
                break;
            case Firebasenotificationlistener.InterceptedNotificationCode.OTHER_NOTIFICATIONS_CODE:
                interceptedNotificationImageView.setImageResource(R.drawable.other_notification_logo);
                break;
        }
    }

    private boolean isNotificationServiceEnabled(){
        String pkgName = getPackageName();
        final String flat = Settings.Secure.getString(getContentResolver(),
                ENABLED_NOTIFICATION_LISTENERS);
        if (!TextUtils.isEmpty(flat)) {
            final String[] names = flat.split(":");
            for (int i = 0; i < names.length; i++) {
                final ComponentName cn = ComponentName.unflattenFromString(names[i]);
                if (cn != null) {
                    if (TextUtils.equals(pkgName, cn.getPackageName())) {
                        return true;
                    }
                }
            }
        }
        return false;
    }









    public class ImageChangeBroadcastReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            int receivedNotificationCode = intent.getIntExtra("Notification Code",-1);
            changeInterceptedNotificationImage(receivedNotificationCode);
        }
    }



    private AlertDialog buildNotificationServiceAlertDialog(){
        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);
        alertDialogBuilder.setTitle(R.string.notification_listener_service);
        alertDialogBuilder.setMessage(R.string.notification_listener_service_explanation);
        alertDialogBuilder.setPositiveButton(R.string.yes,
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        startActivity(new Intent(ACTION_NOTIFICATION_LISTENER_SETTINGS));
                    }
                });
        alertDialogBuilder.setNegativeButton(R.string.no,
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        // If you choose to not enable the notification listener
                        // the app. will not work as expected
                    }
                });
        return(alertDialogBuilder.create());
    }

*/




}
